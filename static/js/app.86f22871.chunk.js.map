{"version":3,"sources":["src/components/PreferencesContext.tsx","src/screens/Home.tsx","src/components/Header.tsx","src/screens/IdentificationMethod.tsx","src/components/DeletableImage.tsx","src/api/plant_id/index.ts","src/screens/ImageMethod.tsx","src/api/trefle/index.ts","src/screens/TextMethod.tsx","src/components/PlantOptionsList.tsx","src/context/index.tsx","src/utils/defaults.ts","src/utils/mapper.ts","src/screens/Result.tsx","src/screens/Name.tsx","src/navigation/RootStackNavigator.tsx","src/components/DrawerContent.tsx","src/navigation/RootNavigation.tsx","src/utils/colors.ts","src/utils/theme.tsx","src/App.tsx"],"names":["PreferencesContext","React","createContext","toggleTheme","isThemeDark","Home","navigation","View","style","styles","container","row","FAB","icon","onPress","navigate","visible","fabStyle","testID","Text","variant","StyleSheet","create","flexGrow","padding","justifyContent","flex","marginBottom","flexDirection","alignItems","margin","MORE_ICON","Platform","OS","Header","back","options","theme","useTheme","useState","menuVisible","setMenuVisible","Appbar","colors","primary","surface","BackAction","goBack","Content","title","Menu","onDismiss","s","anchor","Action","openDrawer","IdentificationMethod","textAlign","label","size","paddingHorizontal","fabVariant","DeletableImage","image","remove","Image","source","uri","position","top","right","value","name","color","containerStyle","badgeContainer","badgeStyle","badge","id","backgroundColor","borderRadius","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","alignSelf","error","images","Constants","manifest","extra","plantIdApiKey","plantIdApiUrl","base64Images","Promise","all","map","response","fetch","blob","resolve","reject","reader","FileReader","onerror","onload","result","readAsDataURL","method","headers","body","JSON","stringify","modifiers","plant_details","json","ImageMethod","setImages","setVisible","buttonOnHold","setButtonOnHold","visibleAlert","setVisiblAlert","errorMessage","setErrorMessage","pickImage","mediaTypes","ImagePicker","Images","allowsEditing","canceled","newImage","assets","assetId","length","toString","some","removeImage","newImages","index","findIndex","splice","searchPlants","identifyPlant","is_plant","Error","message","Dimensions","get","alignContent","pagingEnabled","snapEnabled","mode","modeConfig","snapDirection","loop","data","renderItem","item","compressedFabStyle","onLongPress","disabled","Snackbar","action","bottom","query","gardimApiUrl","TextMethod","searchQuery","setSearchQuery","chips","setChips","Searchbar","placeholder","onChangeText","endsWith","queryString","trim","includes","prevChips","Set","addChip","HelperText","type","chipsContainer","chip","Chip","onClose","chipToDelete","filter","currentChip","marginVertical","flexWrap","marginTop","PlantOptionsList","info","onOptionSelect","selectedId","setSelectedId","option","Card","optionId","card","probability","toFixed","fontSize","PlantContext","PlantProvider","children","plant","setPlant","updatePlant","updatePlantName","contextValue","useMemo","Provider","PH_MINIMUM","PH_MAXIMUM","LIGHT","ATMOSPHERIC_HUMIDITY","TEMPERATURE_MINIMUM","TEMPERATURE_MAXIMUM","HUMIDITY_MINIMUM","HUMIDITY_MAXIMUM","mapToPlant","isTrefle","undefined","plantDetails","code","common_name","scientific_name","edible_parts","ph_maximum","ph_minimum","light","atmospheric_humidity","minimum_temperature","maximum_temperature","minimum_humidity","maximum_humidity","trefleData","edible_part","growth","deg_c","soil_humidity","plantIdData","plant_name","watering","min","max","Result","route","selectedOption","setSelectedOption","plantResult","params","suggestions","plantContext","useContext","handleSelect","handleContinue","getPlant","console","alert","plantSelected","find","it","log","ScrollView","maxHeight","Name","text","setText","TextInput","onSubmitEditing","Stack","createStackNavigator","RootStackNavigator","Navigator","initialRouteName","screenOptions","header","Screen","component","DrawerContent","insets","useSafeAreaInsets","Section","paddingTop","background","TouchableRipple","preference","pointerEvents","Switch","drawerContent","paddingVertical","v3Preference","Drawer","createDrawerNavigator","RootNavigation","NavigationContainer","headerShown","drawerPosition","headerTintColor","onBackground","lightGreenColors","onPrimary","primaryContainer","onPrimaryContainer","secondary","onSecondary","secondaryContainer","onSecondaryContainer","tertiary","onTertiary","tertiaryContainer","onTertiaryContainer","onError","errorContainer","onErrorContainer","onSurface","surfaceVariant","onSurfaceVariant","outline","outlineVariant","shadow","scrim","inverseSurface","inverseOnSurface","inversePrimary","level0","level1","level2","level3","level4","level5","surfaceDisabled","onSurfaceDisabled","backdrop","darkGreenColors","adaptNavigationTheme","reactNavigationLight","NavigationDefaultTheme","reactNavigationDark","NavigationDarkTheme","LightTheme","DarkTheme","CombinedDefaultTheme","MD3LightTheme","CombinedDarkTheme","MD3DarkTheme","registerRootComponent","setIsThemeDark","useCallback","preferences","StatusBar","barStyle"],"mappings":"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","file":"static/js/app.86f22871.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\nimport React from 'react';\n\nexport const PreferencesContext = React.createContext({\n\ttoggleTheme: () => {},\n\tisThemeDark: false,\n});\n","import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Text, FAB } from 'react-native-paper';\nimport { HomeProps } from '../types/index';\n\nexport function Home({ navigation }: HomeProps) {\n\treturn (\n\t\t<View style={styles.container}>\n\t\t\t<View style={styles.row}>\n\t\t\t\t<FAB\n\t\t\t\t\ticon=\"plus\"\n\t\t\t\t\tonPress={() => navigation.navigate('IdentificationMethod')}\n\t\t\t\t\tvisible\n\t\t\t\t\tstyle={[styles.fabStyle]}\n\t\t\t\t\ttestID=\"Adicione sua primeira planta\"\n\t\t\t\t/>\n\t\t\t\t<Text variant=\"titleSmall\">Adicione sua primeira planta</Text>\n\t\t\t</View>\n\t\t</View>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflexGrow: 1,\n\t\tpadding: 8,\n\t\tjustifyContent: 'center',\n\t},\n\trow: {\n\t\tflex: 0.5,\n\t\tmarginBottom: 8,\n\t\tflexDirection: 'column',\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t\tpadding: 10,\n\t},\n\tfabStyle: {\n\t\tmargin: 20,\n\t},\n});\n","import { DrawerNavigationProp } from '@react-navigation/drawer';\nimport { StackHeaderProps } from '@react-navigation/stack';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport { useTheme, Appbar, Menu } from 'react-native-paper';\n\nexport type RootStackParamList = {\n\tApp: undefined;\n};\n\nconst MORE_ICON = Platform.OS === 'ios' ? 'dots-horizontal' : 'dots-vertical';\n\nexport const Header = ({ navigation, back, options }: StackHeaderProps) => {\n\tconst theme = useTheme();\n\tconst [menuVisible, setMenuVisible] = React.useState(false);\n\n\treturn (\n\t\t<Appbar.Header\n\t\t\ttheme={{\n\t\t\t\tcolors: {\n\t\t\t\t\tprimary: theme?.colors.surface,\n\t\t\t\t},\n\t\t\t}}>\n\t\t\t{back ? <Appbar.BackAction onPress={navigation.goBack} testID=\"back icon\" /> : null}\n\t\t\t<Appbar.Content title={options.title} />\n\t\t\t<Menu\n\t\t\t\tvisible={menuVisible}\n\t\t\t\tonDismiss={() => setMenuVisible(false)}\n\t\t\t\tanchor={\n\t\t\t\t\t<Appbar.Action\n\t\t\t\t\t\ttestID=\"Appbar Menu\"\n\t\t\t\t\t\ticon={MORE_ICON}\n\t\t\t\t\t\tonPress={() =>\n\t\t\t\t\t\t\t(navigation as unknown as DrawerNavigationProp<{ any }>).openDrawer()\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t}>\n\t\t\t\t<></>\n\t\t\t</Menu>\n\t\t</Appbar.Header>\n\t);\n};\n","import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Text, FAB } from 'react-native-paper';\nimport { IdentificationMethodProps } from '../types/index';\n\nexport default function IdentificationMethod({ navigation }: IdentificationMethodProps) {\n\treturn (\n\t\t<View style={styles.container}>\n\t\t\t<View style={styles.row}>\n\t\t\t\t<Text variant=\"titleMedium\" style={{ textAlign: 'center' }}>\n\t\t\t\t\t{' '}\n\t\t\t\t\tSelecione o método que deseja seguir para identificar sua plantinha!\n\t\t\t\t</Text>\n\t\t\t\t<FAB\n\t\t\t\t\ticon=\"camera\"\n\t\t\t\t\tlabel=\"Identificar por imagem\"\n\t\t\t\t\tonPress={() => navigation.navigate('ImageMethod')}\n\t\t\t\t\tsize=\"medium\"\n\t\t\t\t\tvisible\n\t\t\t\t\ttestID=\"Identiricar por imagem\"\n\t\t\t\t/>\n\t\t\t\t<Text variant=\"titleMedium\"> ou </Text>\n\t\t\t\t<FAB\n\t\t\t\t\ticon=\"clipboard-edit-outline\"\n\t\t\t\t\tlabel=\"Identificar por texto\"\n\t\t\t\t\tonPress={() => navigation.navigate('TextMethod')}\n\t\t\t\t\tvisible\n\t\t\t\t\tsize=\"medium\"\n\t\t\t\t\ttestID=\"Identificar por texto\"\n\t\t\t\t/>\n\t\t\t</View>\n\t\t</View>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflexGrow: 0.9,\n\t\tpaddingHorizontal: 8,\n\t\tjustifyContent: 'center',\n\t},\n\trow: {\n\t\tflex: 0.5,\n\t\tmarginBottom: 8,\n\t\tflexDirection: 'column',\n\t\tjustifyContent: 'space-evenly',\n\t\talignItems: 'center',\n\t},\n\tfabVariant: {},\n});\n","import React from 'react';\nimport { View, StyleSheet, Image } from 'react-native';\nimport { ImageType } from '../types/index';\nimport { Badge, Icon } from 'react-native-elements';\nimport { useTheme } from 'react-native-paper';\n\ntype DeletableImageType = {\n\timage: ImageType;\n\tremove: (id: string) => void;\n};\n\nexport function DeletableImage({ image, remove }: DeletableImageType) {\n\tconst theme = useTheme();\n\n\treturn (\n\t\t<View style={styles(theme).container}>\n\t\t\t<Image source={{ uri: image.uri }} style={styles(theme).image} />\n\t\t\t<View style={{ position: 'absolute', top: 0, right: 0 }}>\n\t\t\t\t<Badge\n\t\t\t\t\tvalue={<Icon name=\"close\" size={18} color=\"white\" testID=\"close badge\" />}\n\t\t\t\t\tcontainerStyle={styles(theme).badgeContainer}\n\t\t\t\t\tbadgeStyle={styles(theme).badge}\n\t\t\t\t\tonPress={() => remove(image.id)}\n\t\t\t\t/>\n\t\t\t</View>\n\t\t</View>\n\t);\n}\n\nconst styles = (theme) =>\n\tStyleSheet.create({\n\t\tcontainer: {\n\t\t\tbackgroundColor: '#fff',\n\t\t\tborderRadius: 10,\n\t\t\tshadowColor: '#000',\n\t\t\tshadowOffset: { width: 0, height: 2 },\n\t\t\tshadowOpacity: 0.25,\n\t\t\tshadowRadius: 3.84,\n\t\t\televation: 5,\n\t\t\twidth: '70%',\n\t\t\talignSelf: 'center',\n\t\t\theight: 200,\n\t\t\tmargin: 20,\n\t\t},\n\t\timage: {\n\t\t\twidth: '100%',\n\t\t\theight: 200,\n\t\t\tborderRadius: 10,\n\t\t},\n\t\tbadgeContainer: {\n\t\t\tposition: 'relative',\n\t\t\ttop: -10,\n\t\t\tright: -10,\n\t\t\tbackgroundColor: 'transparent',\n\t\t},\n\t\tbadge: {\n\t\t\theight: 30,\n\t\t\twidth: 30,\n\t\t\tbackgroundColor: theme.colors.error,\n\t\t},\n\t});\n","import { ImageType } from '../../types';\nimport { PlantIDResponse } from './types';\nimport Constants from 'expo-constants';\n\nexport async function identifyPlant(images: ImageType[]): Promise<PlantIDResponse> {\n\tconst { plantIdApiKey, plantIdApiUrl } = Constants.manifest.extra;\n\n\tconst base64Images = await Promise.all(\n\t\timages.map(async (image: ImageType) => {\n\t\t\tconst response = await fetch(image.uri);\n\t\t\tconst blob = await response.blob();\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst reader = new FileReader();\n\t\t\t\treader.onerror = () => reject('Failed to convert image to base64');\n\t\t\t\treader.onload = () => resolve(reader.result as string);\n\t\t\t\treader.readAsDataURL(blob);\n\t\t\t});\n\t\t})\n\t);\n\n\tconst response = await fetch(`${plantIdApiUrl}/identify`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Api-Key': plantIdApiKey,\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify({\n\t\t\timages: base64Images,\n\t\t\tmodifiers: ['similar_images'],\n\t\t\tplant_details: [\n\t\t\t\t'common_names',\n\t\t\t\t'wiki_description',\n\t\t\t\t'edible_parts',\n\t\t\t\t'propagation_methods',\n\t\t\t\t'name_authority',\n\t\t\t\t'taxonomy',\n\t\t\t\t'watering',\n\t\t\t],\n\t\t}),\n\t});\n\n\tconst result = await response.json();\n\treturn result;\n}\n","import * as ImagePicker from 'expo-image-picker';\nimport React, { useState } from 'react';\nimport { StyleSheet, View, Dimensions } from 'react-native';\nimport { ImageMethodProps, ImageType } from '../types/index';\nimport { DeletableImage } from '../components/DeletableImage';\nimport { FAB, Text, Snackbar } from 'react-native-paper';\nimport Carousel from 'react-native-reanimated-carousel';\nimport { identifyPlant } from '../api/plant_id';\n\nexport function ImageMethod({ navigation }: ImageMethodProps) {\n\tconst [images, setImages] = useState<ImageType[]>([]);\n\tconst [visible, setVisible] = React.useState<boolean>(false);\n\tconst [buttonOnHold, setButtonOnHold] = React.useState<boolean>(false);\n\tconst [visibleAlert, setVisiblAlert] = React.useState(false);\n\tconst [errorMessage, setErrorMessage] = React.useState('');\n\n\tconst onDismissSnackBar = () => setVisiblAlert(false);\n\n\tconst pickImage = async (method) => {\n\t\tconst options = {\n\t\t\tmediaTypes: ImagePicker.MediaTypeOptions.Images,\n\t\t\tallowsEditing: false,\n\t\t};\n\n\t\tlet result: ImagePicker.ImagePickerResult = null;\n\n\t\tif (method == 'camera') {\n\t\t\tresult = await ImagePicker.launchCameraAsync(options);\n\t\t} else {\n\t\t\tresult = await ImagePicker.launchImageLibraryAsync(options);\n\t\t}\n\n\t\tif (!result.canceled) {\n\t\t\tconst newImage = {\n\t\t\t\tid: result.assets[0].assetId ? result.assets[0].assetId : images.length.toString(),\n\t\t\t\turi: result.assets[0].uri,\n\t\t\t};\n\t\t\tif (!images.some((image) => image.id === newImage.id)) {\n\t\t\t\tsetImages([...images, newImage]);\n\t\t\t}\n\t\t} else {\n\t\t\tsetErrorMessage('Você não adicionou nenhuma imagem.');\n\t\t\tsetVisiblAlert(true);\n\t\t}\n\t};\n\tconst removeImage = (id: string) => {\n\t\tconst newImages = [...images];\n\t\tconst index = newImages.findIndex((image) => image.id === id);\n\t\tif (index !== -1) {\n\t\t\tnewImages.splice(index, 1);\n\t\t\tsetImages(newImages);\n\t\t}\n\t};\n\n\tconst searchPlants = async () => {\n\t\tif (!buttonOnHold) {\n\t\t\tsetButtonOnHold(true);\n\t\t\ttry {\n\t\t\t\tconst result = await identifyPlant(images);\n\t\t\t\tif (result.is_plant) {\n\t\t\t\t\tnavigation.navigate('Result', result);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('Nenhuma planta foi encontrada');\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tsetErrorMessage(error.message);\n\t\t\t\tsetVisiblAlert(true);\n\t\t\t} finally {\n\t\t\t\tsetButtonOnHold(false);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst width = Dimensions.get('window').width;\n\n\treturn (\n\t\t<>\n\t\t\t<View style={styles.container}>\n\t\t\t\t<Text variant=\"titleMedium\" style={{ textAlign: 'center' }}>\n\t\t\t\t\tAdicione algumas fotos para podermos identificar sua planta!\n\t\t\t\t</Text>\n\t\t\t\t<View style={styles.row}>\n\t\t\t\t\t<FAB\n\t\t\t\t\t\ticon=\"camera\"\n\t\t\t\t\t\tlabel=\"Tirar foto\"\n\t\t\t\t\t\tonPress={() => pickImage('camera')}\n\t\t\t\t\t\tvisible\n\t\t\t\t\t\tstyle={[styles.fabStyle]}\n\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\ttestID=\"Tirar foto\"\n\t\t\t\t\t/>\n\t\t\t\t\t<FAB\n\t\t\t\t\t\ticon=\"image\"\n\t\t\t\t\t\tlabel=\"Adicionar da galeria\"\n\t\t\t\t\t\tonPress={() => pickImage('gallery')}\n\t\t\t\t\t\tvisible\n\t\t\t\t\t\tstyle={[styles.fabStyle]}\n\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\ttestID=\"Adicionar da galeria\"\n\t\t\t\t\t/>\n\t\t\t\t</View>\n\t\t\t\t{images.length > 0 && (\n\t\t\t\t\t<View\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tflex: 1,\n\t\t\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\t\t\tflexDirection: 'column',\n\t\t\t\t\t\t\talignContent: 'center',\n\t\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t<Carousel\n\t\t\t\t\t\t\tpagingEnabled={true}\n\t\t\t\t\t\t\tsnapEnabled={true}\n\t\t\t\t\t\t\tmode={'horizontal-stack'}\n\t\t\t\t\t\t\tmodeConfig={{\n\t\t\t\t\t\t\t\tsnapDirection: 'left',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tloop={true}\n\t\t\t\t\t\t\twidth={width}\n\t\t\t\t\t\t\tdata={images}\n\t\t\t\t\t\t\trenderItem={({ item }) => <DeletableImage image={item} remove={removeImage} />}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FAB\n\t\t\t\t\t\t\ticon=\"arrow-right\"\n\t\t\t\t\t\t\tlabel={visible ? 'Continuar' : ''}\n\t\t\t\t\t\t\tonPress={() => searchPlants()}\n\t\t\t\t\t\t\tstyle={[styles.compressedFabStyle]}\n\t\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\t\tonLongPress={() => setVisible(!visible)}\n\t\t\t\t\t\t\tdisabled={buttonOnHold}\n\t\t\t\t\t\t\ttestID=\"Continuar\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</View>\n\t\t\t\t)}\n\t\t\t</View>\n\t\t\t<Snackbar\n\t\t\t\tvisible={visibleAlert}\n\t\t\t\taction={{\n\t\t\t\t\tlabel: 'OK',\n\t\t\t\t}}\n\t\t\t\tonDismiss={onDismissSnackBar}\n\t\t\t\tstyle={{\n\t\t\t\t\tmarginBottom: 30,\n\t\t\t\t}}>\n\t\t\t\t{errorMessage}\n\t\t\t</Snackbar>\n\t\t</>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflexGrow: 1,\n\t\tpadding: 40,\n\t\tjustifyContent: 'center',\n\t},\n\trow: {\n\t\tflex: 0.5,\n\t\tflexDirection: 'column',\n\t\tjustifyContent: 'space-evenly',\n\t},\n\tfabStyle: {},\n\tcompressedFabStyle: {\n\t\tposition: 'absolute',\n\t\tright: 0,\n\t\tbottom: 0,\n\t},\n});\n","import Constants from 'expo-constants';\nimport { TreflePlantSearchResponse, TrefleSpeciesResponse } from './types';\n\nexport async function identifyPlant(query: string[]): Promise<TreflePlantSearchResponse> {\n\tconst { gardimApiUrl } = Constants.manifest.extra;\n\tconst response = await fetch(`${gardimApiUrl}/.netlify/functions/api/trefle`, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify(query),\n\t});\n\n\tconst result = await response.json();\n\treturn result;\n}\n\nexport async function getPlant(id: number): Promise<TrefleSpeciesResponse> {\n\tconst { gardimApiUrl } = Constants.manifest.extra;\n\tconst response = await fetch(`${gardimApiUrl}/.netlify/functions/api/trefle?id=${id}`, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t});\n\n\tconst result = await response.json();\n\treturn result;\n}\n","import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Text, Searchbar, Chip, FAB, HelperText, Snackbar } from 'react-native-paper';\nimport { TextMethodProps } from '../types/index';\nimport { identifyPlant } from '../api/trefle';\n\nexport function TextMethod({ navigation }: TextMethodProps) {\n\tconst [searchQuery, setSearchQuery] = React.useState('');\n\tconst [chips, setChips] = React.useState([]);\n\tconst [visible, setVisible] = React.useState<boolean>(false);\n\tconst [buttonOnHold, setButtonOnHold] = React.useState<boolean>(false);\n\tconst [visibleAlert, setVisiblAlert] = React.useState(false);\n\tconst [errorMessage, setErrorMessage] = React.useState('');\n\n\tconst addChip = () => {\n\t\tconst queryString = searchQuery.trim();\n\n\t\tif (!chips.includes(queryString) && queryString) {\n\t\t\tsetChips((prevChips) => [...new Set([...prevChips, queryString])]);\n\t\t}\n\t\tsetSearchQuery('');\n\t};\n\n\tconst onDismissSnackBar = () => setVisiblAlert(false);\n\n\tconst removeChip = (chipToDelete) => {\n\t\tsetChips((prevChips) => prevChips.filter((currentChip) => currentChip !== chipToDelete));\n\t};\n\n\tconst onChangeSearch = (query) => {\n\t\tsetSearchQuery(query);\n\t\tif (query.endsWith(' ')) {\n\t\t\taddChip();\n\t\t}\n\t};\n\n\tconst searchPlants = async () => {\n\t\tif (!buttonOnHold) {\n\t\t\tsetButtonOnHold(true);\n\t\t\ttry {\n\t\t\t\tconst result = await identifyPlant(chips);\n\t\t\t\tif (result.data.length) {\n\t\t\t\t\tnavigation.navigate('Result', result);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('Nenhuma planta foi encontrada');\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tsetErrorMessage(error.message);\n\t\t\t\tsetVisiblAlert(true);\n\t\t\t} finally {\n\t\t\t\tsetButtonOnHold(false);\n\t\t\t}\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<View style={styles.container}>\n\t\t\t\t<View style={styles.row}>\n\t\t\t\t\t<Text variant=\"titleMedium\" style={{ textAlign: 'center' }}>\n\t\t\t\t\t\tDigite algumas palavras-chave que nos ajude a identificar sua planta!\n\t\t\t\t\t</Text>\n\n\t\t\t\t\t<Searchbar\n\t\t\t\t\t\tplaceholder=\"Search\"\n\t\t\t\t\t\tvalue={searchQuery}\n\t\t\t\t\t\tonChangeText={onChangeSearch}\n\t\t\t\t\t\tstyle={styles.fabVariant}\n\t\t\t\t\t/>\n\t\t\t\t\t<HelperText type=\"info\" visible>\n\t\t\t\t\t\tPressione espaço para dividir as palavras!\n\t\t\t\t\t</HelperText>\n\t\t\t\t\t<View style={styles.chipsContainer}>\n\t\t\t\t\t\t{chips.map((chip) => (\n\t\t\t\t\t\t\t<Chip key={chip} onClose={() => removeChip(chip)} style={styles.chip}>\n\t\t\t\t\t\t\t\t{chip}\n\t\t\t\t\t\t\t</Chip>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t\t<View style={styles.row}>\n\t\t\t\t\t{chips.length > 0 && (\n\t\t\t\t\t\t<FAB\n\t\t\t\t\t\t\ticon=\"arrow-right\"\n\t\t\t\t\t\t\tlabel={visible ? 'Continuar' : ''}\n\t\t\t\t\t\t\tonPress={() => searchPlants()}\n\t\t\t\t\t\t\tstyle={[styles.compressedFabStyle]}\n\t\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\t\tonLongPress={() => setVisible(!visible)}\n\t\t\t\t\t\t\tdisabled={buttonOnHold}\n\t\t\t\t\t\t\ttestID=\"Continuar\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t\t<Snackbar\n\t\t\t\tvisible={visibleAlert}\n\t\t\t\taction={{\n\t\t\t\t\tlabel: 'OK',\n\t\t\t\t}}\n\t\t\t\tonDismiss={onDismissSnackBar}\n\t\t\t\tstyle={{\n\t\t\t\t\tmarginBottom: 30,\n\t\t\t\t}}>\n\t\t\t\t{errorMessage}\n\t\t\t</Snackbar>\n\t\t</>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflexGrow: 1,\n\t\tpadding: 40,\n\t\tjustifyContent: 'space-around',\n\t},\n\trow: {\n\t\tflex: 1,\n\t\tflexDirection: 'column',\n\t\tjustifyContent: 'center',\n\t},\n\tfabVariant: {\n\t\tmarginVertical: 20,\n\t},\n\tchipsContainer: {\n\t\tflexDirection: 'row',\n\t\tflexWrap: 'wrap',\n\t\tmarginTop: 8,\n\t\tjustifyContent: 'flex-start',\n\t},\n\tchip: {\n\t\tmargin: 4,\n\t},\n\tcompressedFabStyle: {\n\t\tposition: 'absolute',\n\t\tright: 0,\n\t\tbottom: 0,\n\t},\n});\n","import React, { useState } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Card, Text } from 'react-native-paper';\n\ntype PlantOptionsListProps = {\n\tinfo: {\n\t\tid: number;\n\t\tname: string;\n\t\tprobability: number | null;\n\t}[];\n\tonOptionSelect: (id: string) => void;\n};\n\nexport const PlantOptionsList = ({ info, onOptionSelect }: PlantOptionsListProps) => {\n\tconst [selectedId, setSelectedId] = useState(null);\n\n\tconst handleOptionSelect = (optionId) => {\n\t\tonOptionSelect(optionId);\n\t\tif (selectedId == optionId) {\n\t\t\tsetSelectedId(null);\n\t\t} else {\n\t\t\tsetSelectedId(optionId);\n\t\t}\n\t};\n\n\treturn (\n\t\t<View style={styles.container}>\n\t\t\t{info.map((option) => (\n\t\t\t\t<Card\n\t\t\t\t\tonPress={() => handleOptionSelect(option.id)}\n\t\t\t\t\tkey={option.id}\n\t\t\t\t\tstyle={styles.card}\n\t\t\t\t\tmode={selectedId === option.id ? 'contained' : 'elevated'}\n\t\t\t\t\ttestID=\"CardComponent\">\n\t\t\t\t\t<Card.Content>\n\t\t\t\t\t\t<Text variant=\"titleMedium\">{option.name}</Text>\n\t\t\t\t\t\t{option.probability ? (\n\t\t\t\t\t\t\t<Text style={styles.probability}>\n\t\t\t\t\t\t\t\tProbabilidade de acerto: {option.probability.toFixed(2)}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</Card.Content>\n\t\t\t\t</Card>\n\t\t\t))}\n\t\t</View>\n\t);\n};\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tpadding: 16,\n\t},\n\tcard: {\n\t\tmarginBottom: 8,\n\t},\n\tprobability: {\n\t\tmarginTop: 4,\n\t\tfontSize: 12,\n\t\tcolor: '#666',\n\t},\n});\n","import React, { createContext, useState, useMemo, ReactNode } from 'react';\nimport { Plant, PlantContextType } from '../types/index';\n\nexport const PlantContext = createContext<PlantContextType | null>(null);\n\ninterface PlantProviderProps {\n\tchildren: ReactNode;\n}\n\nexport const PlantProvider = ({ children }: PlantProviderProps) => {\n\tconst [plant, setPlant] = useState(null);\n\n\tconst updatePlant = (plant: Plant) => {\n\t\tsetPlant(plant);\n\t};\n\n\tconst updatePlantName = (name: string) => {\n\t\tsetPlant({\n\t\t\t...plant,\n\t\t\tname: name,\n\t\t});\n\t};\n\n\tconst contextValue = useMemo(() => {\n\t\treturn { plant, updatePlant, updatePlantName };\n\t}, [plant, updatePlantName]);\n\n\treturn <PlantContext.Provider value={contextValue}>{children}</PlantContext.Provider>;\n};\n","export const PH_MINIMUM = 4;\nexport const PH_MAXIMUM = 5;\n\nexport const LIGHT = 5;\n\nexport const ATMOSPHERIC_HUMIDITY = 5;\n\nexport const TEMPERATURE_MINIMUM = 15;\nexport const TEMPERATURE_MAXIMUM = 27;\n\nexport const HUMIDITY_MINIMUM = 5;\nexport const HUMIDITY_MAXIMUM = 5;\n","import { TrefleSpeciesResponse } from '../api/trefle/types';\nimport { Suggestion } from '../api/plant_id/types';\nimport { Plant } from '../types/index';\nimport {\n\tPH_MAXIMUM,\n\tPH_MINIMUM,\n\tLIGHT,\n\tATMOSPHERIC_HUMIDITY,\n\tTEMPERATURE_MINIMUM,\n\tTEMPERATURE_MAXIMUM,\n\tHUMIDITY_MINIMUM,\n\tHUMIDITY_MAXIMUM,\n} from './defaults';\n\nexport const mapToPlant = (info: TrefleSpeciesResponse | Suggestion): Plant => {\n\tconst isTrefle = (info as TrefleSpeciesResponse)?.data !== undefined;\n\tconst plantDetails: Plant = {\n\t\tname: null,\n\t\tcode: null,\n\t\tcommon_name: null,\n\t\tscientific_name: null,\n\t\tedible_parts: null,\n\t\tph_maximum: PH_MAXIMUM,\n\t\tph_minimum: PH_MINIMUM,\n\t\tlight: LIGHT,\n\t\tatmospheric_humidity: ATMOSPHERIC_HUMIDITY,\n\t\tminimum_temperature: TEMPERATURE_MINIMUM,\n\t\tmaximum_temperature: TEMPERATURE_MAXIMUM,\n\t\tminimum_humidity: HUMIDITY_MINIMUM,\n\t\tmaximum_humidity: HUMIDITY_MAXIMUM,\n\t};\n\n\tif (isTrefle) {\n\t\tconst trefleData = (info as TrefleSpeciesResponse).data;\n\t\tplantDetails.common_name = trefleData.common_name ?? plantDetails.common_name;\n\t\tplantDetails.scientific_name = trefleData.scientific_name ?? plantDetails.scientific_name;\n\t\tplantDetails.edible_parts = trefleData.edible_part ?? plantDetails.edible_parts;\n\t\tplantDetails.ph_maximum = trefleData.growth?.ph_maximum ?? plantDetails.ph_maximum;\n\t\tplantDetails.ph_minimum = trefleData.growth?.ph_minimum ?? plantDetails.ph_minimum;\n\t\tplantDetails.light = trefleData.growth?.light ?? plantDetails.light;\n\t\tplantDetails.atmospheric_humidity =\n\t\t\ttrefleData.growth?.atmospheric_humidity ?? plantDetails.atmospheric_humidity;\n\t\tplantDetails.minimum_temperature =\n\t\t\ttrefleData.growth?.minimum_temperature?.deg_c ?? plantDetails.minimum_temperature;\n\t\tplantDetails.maximum_temperature =\n\t\t\ttrefleData.growth?.maximum_temperature?.deg_c ?? plantDetails.maximum_temperature;\n\t\tplantDetails.minimum_humidity = trefleData.growth?.soil_humidity\n\t\t\t? trefleData.growth.soil_humidity - 2\n\t\t\t: plantDetails.minimum_humidity;\n\t\tplantDetails.maximum_humidity = trefleData.growth?.soil_humidity\n\t\t\t? trefleData.growth.soil_humidity + 2\n\t\t\t: plantDetails.maximum_humidity;\n\t} else {\n\t\tconst plantIdData = info as Suggestion;\n\t\tplantDetails.common_name = plantIdData.plant_name ?? plantDetails.common_name;\n\t\tplantDetails.scientific_name =\n\t\t\tplantIdData.plant_details?.scientific_name ?? plantDetails.scientific_name;\n\t\tplantDetails.edible_parts =\n\t\t\tplantIdData.plant_details?.edible_parts ?? plantDetails.edible_parts;\n\t\tplantDetails.minimum_humidity =\n\t\t\tplantIdData.plant_details?.watering?.min ?? plantDetails.minimum_humidity;\n\t\tplantDetails.maximum_humidity =\n\t\t\tplantIdData.plant_details?.watering?.max ?? plantDetails.maximum_humidity;\n\t}\n\n\treturn plantDetails;\n};\n","import React, { useState, useContext } from 'react';\nimport { View, StyleSheet, ScrollView, Dimensions, Platform } from 'react-native';\nimport { PlantOptionsList } from '../components/PlantOptionsList';\nimport { ResultProps } from '../types/index';\nimport { Text, FAB } from 'react-native-paper';\nimport { PlantIDResponse } from '../api/plant_id/types';\nimport { TreflePlantSearchResponse } from '../api/trefle/types';\nimport { getPlant } from '../api/trefle';\nimport { PlantContext } from '../context';\nimport { mapToPlant } from '../utils/mapper';\n\nexport function Result({ navigation, route }: ResultProps) {\n\tconst [selectedOption, setSelectedOption] = useState(null);\n\tconst [visible, setVisible] = React.useState<boolean>(false);\n\tconst [buttonOnHold, setButtonOnHold] = React.useState<boolean>(false);\n\n\tconst plantResult = route.params;\n\tconst isTrefle = (plantResult as PlantIDResponse).suggestions ? false : true;\n\tlet height = Dimensions.get('window').height;\n\n\tconst plantContext = useContext(PlantContext);\n\n\tif (Platform.OS === 'web') {\n\t\theight -= 100;\n\t}\n\n\tconst handleSelect = (optionId) => {\n\t\tif (selectedOption == optionId) {\n\t\t\tsetSelectedOption(null);\n\t\t} else {\n\t\t\tsetSelectedOption(optionId);\n\t\t}\n\t};\n\n\tconst handleContinue = async () => {\n\t\tlet plant = null;\n\t\tif (isTrefle) {\n\t\t\tif (!buttonOnHold) {\n\t\t\t\tsetButtonOnHold(true);\n\t\t\t\ttry {\n\t\t\t\t\tconst result = await getPlant(selectedOption);\n\t\t\t\t\tif (result.data) {\n\t\t\t\t\t\tplant = mapToPlant(result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Trefle Species not found');\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t\talert('Oops! Algo deu errado');\n\t\t\t\t} finally {\n\t\t\t\t\tsetButtonOnHold(false);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst plantSelected = (plantResult as PlantIDResponse).suggestions.find(\n\t\t\t\t(it) => it.id === selectedOption\n\t\t\t);\n\n\t\t\tconsole.log(JSON.stringify(plantSelected));\n\n\t\t\tplant = mapToPlant(plantSelected);\n\t\t}\n\n\t\tplantContext.updatePlant(plant);\n\t\tnavigation.navigate('Name');\n\t};\n\n\treturn (\n\t\t<View style={styles.container}>\n\t\t\t<View style={styles.row}>\n\t\t\t\t<Text variant=\"titleMedium\" style={{ textAlign: 'center' }}>\n\t\t\t\t\tSelecione o resultado da busca\n\t\t\t\t</Text>\n\t\t\t\t<ScrollView style={{ maxHeight: height }}>\n\t\t\t\t\t{(plantResult as PlantIDResponse).suggestions ? (\n\t\t\t\t\t\t<PlantOptionsList\n\t\t\t\t\t\t\tinfo={(plantResult as PlantIDResponse).suggestions.map((it) => ({\n\t\t\t\t\t\t\t\tid: it.id,\n\t\t\t\t\t\t\t\tname: it.plant_name,\n\t\t\t\t\t\t\t\tprobability: it.probability,\n\t\t\t\t\t\t\t}))}\n\t\t\t\t\t\t\tonOptionSelect={handleSelect}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<PlantOptionsList\n\t\t\t\t\t\t\tinfo={(plantResult as TreflePlantSearchResponse).data\n\t\t\t\t\t\t\t\t.filter((it) => it.common_name != null)\n\t\t\t\t\t\t\t\t.map((it) => ({\n\t\t\t\t\t\t\t\t\tid: it.id,\n\t\t\t\t\t\t\t\t\tname: it.common_name,\n\t\t\t\t\t\t\t\t\tprobability: null,\n\t\t\t\t\t\t\t\t}))}\n\t\t\t\t\t\t\tonOptionSelect={handleSelect}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</ScrollView>\n\t\t\t</View>\n\t\t\t{selectedOption && (\n\t\t\t\t<FAB\n\t\t\t\t\ticon=\"arrow-right\"\n\t\t\t\t\tlabel={visible ? 'Continuar' : ''}\n\t\t\t\t\tonPress={() => handleContinue()}\n\t\t\t\t\tstyle={[styles.compressedFabStyle]}\n\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\tonLongPress={() => setVisible(!visible)}\n\t\t\t\t\tdisabled={buttonOnHold}\n\t\t\t\t\ttestID=\"Resultado Continuar\"\n\t\t\t\t/>\n\t\t\t)}\n\t\t</View>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflexGrow: 1,\n\t\tjustifyContent: 'flex-start',\n\t},\n\trow: {\n\t\tflexDirection: 'column',\n\t\tjustifyContent: 'space-evenly',\n\t},\n\tfabStyle: {},\n\tcompressedFabStyle: {\n\t\tposition: 'absolute',\n\t\tright: 0,\n\t\tbottom: 0,\n\t\tmargin: 40,\n\t},\n});\n","import React, { useContext } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Text, TextInput, FAB } from 'react-native-paper';\nimport { NameProps } from '../types/index';\nimport { PlantContext } from '../context';\n\nexport function Name({ navigation }: NameProps) {\n\tconst [text, setText] = React.useState('');\n\tconst [visible, setVisible] = React.useState<boolean>(false);\n\n\tconst plantContext = useContext(PlantContext);\n\n\tconst handleSubmit = () => {\n\t\tplantContext.updatePlantName(text);\n\t};\n\treturn (\n\t\t<View style={styles.container}>\n\t\t\t<View style={styles.row}>\n\t\t\t\t<Text variant=\"titleMedium\" style={{ textAlign: 'center' }}>\n\t\t\t\t\t{' '}\n\t\t\t\t\tDê um nome à sua planta!\n\t\t\t\t</Text>\n\t\t\t\t<TextInput\n\t\t\t\t\tmode=\"flat\"\n\t\t\t\t\tvalue={text}\n\t\t\t\t\tonChangeText={(text) => setText(text)}\n\t\t\t\t\tstyle={styles.fabVariant}\n\t\t\t\t\tonSubmitEditing={() => handleSubmit()}\n\t\t\t\t\ttestID=\"input-nome\"\n\t\t\t\t/>\n\t\t\t</View>\n\t\t\t{text.length > 0 && (\n\t\t\t\t<FAB\n\t\t\t\t\ticon=\"arrow-right\"\n\t\t\t\t\tlabel={visible ? 'Continuar' : ''}\n\t\t\t\t\tonPress={() => console.log('click')}\n\t\t\t\t\tstyle={[styles.compressedFabStyle]}\n\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\tonLongPress={() => setVisible(!visible)}\n\t\t\t\t\ttestID=\"Nome Continuar\"\n\t\t\t\t/>\n\t\t\t)}\n\t\t</View>\n\t);\n}\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflexGrow: 1,\n\t},\n\trow: {\n\t\tflex: 0.5,\n\t\tflexDirection: 'column',\n\t\tjustifyContent: 'center',\n\t\tpadding: 40,\n\t},\n\tfabVariant: {\n\t\tmarginVertical: 20,\n\t},\n\tcompressedFabStyle: {\n\t\tposition: 'absolute',\n\t\tmargin: 40,\n\t\tright: 0,\n\t\tbottom: 0,\n\t},\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport 'react-native-gesture-handler';\nimport React from 'react';\nimport { Home } from '../screens/Home';\nimport { Header } from '../components/Header';\nimport IdentificationMethod from '../screens/IdentificationMethod';\nimport { ImageMethod } from '../screens/ImageMethod';\nimport { TextMethod } from '../screens/TextMethod';\nimport { Result } from '../screens/Result';\nimport { Name } from '../screens/Name';\n\nconst Stack = createStackNavigator();\n\nexport default function RootStackNavigator() {\n\treturn (\n\t\t<Stack.Navigator\n\t\t\tinitialRouteName=\"Home\"\n\t\t\tscreenOptions={{\n\t\t\t\theader: Header,\n\t\t\t}}>\n\t\t\t<Stack.Screen name=\"Home\" component={Home} options={{ title: 'Suas Plantas' }} />\n\t\t\t<Stack.Screen\n\t\t\t\tname=\"IdentificationMethod\"\n\t\t\t\tcomponent={IdentificationMethod}\n\t\t\t\toptions={{ title: 'Método de Identificação' }}\n\t\t\t/>\n\t\t\t<Stack.Screen\n\t\t\t\tname=\"ImageMethod\"\n\t\t\t\tcomponent={ImageMethod}\n\t\t\t\toptions={{ title: 'Identificação por imagem' }}\n\t\t\t/>\n\t\t\t<Stack.Screen\n\t\t\t\tname=\"TextMethod\"\n\t\t\t\tcomponent={TextMethod}\n\t\t\t\toptions={{ title: 'Identificação por texto' }}\n\t\t\t/>\n\t\t\t<Stack.Screen name=\"Result\" component={Result} options={{ title: 'Resultado' }} />\n\t\t\t<Stack.Screen name=\"Name\" component={Name} options={{ title: 'Nome' }} />\n\t\t</Stack.Navigator>\n\t);\n}\n","import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Drawer, Switch, Text, TouchableRipple, useTheme } from 'react-native-paper';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nimport { PreferencesContext } from './PreferencesContext';\n\nexport default function DrawerContent() {\n\tconst insets = useSafeAreaInsets();\n\n\tconst { toggleTheme, isThemeDark } = React.useContext(PreferencesContext);\n\tconst theme = useTheme();\n\n\treturn (\n\t\t<Drawer.Section\n\t\t\ttitle=\"Preferences\"\n\t\t\tstyle={{\n\t\t\t\tflex: 1,\n\t\t\t\tpaddingTop: insets.top + 4,\n\t\t\t\tbackgroundColor: theme.colors.background,\n\t\t\t\tmarginBottom: 0,\n\t\t\t}}>\n\t\t\t<TouchableRipple onPress={toggleTheme}>\n\t\t\t\t<View style={[styles.preference]}>\n\t\t\t\t\t<Text variant=\"labelLarge\">Dark Theme</Text>\n\t\t\t\t\t<View pointerEvents=\"none\">\n\t\t\t\t\t\t<Switch value={isThemeDark} testID=\"theme switch\" />\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t</TouchableRipple>\n\t\t</Drawer.Section>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tdrawerContent: {\n\t\tflex: 1,\n\t},\n\tpreference: {\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'space-between',\n\t\talignItems: 'center',\n\t\tpaddingVertical: 12,\n\t\tpaddingHorizontal: 16,\n\t},\n\tv3Preference: {\n\t\theight: 56,\n\t\tpaddingHorizontal: 28,\n\t},\n\tbadge: {\n\t\talignSelf: 'center',\n\t},\n});\n","/* eslint-disable react/prop-types */\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavigationContainer } from '@react-navigation/native';\nimport React from 'react';\n\nimport RootStackNavigator from './RootStackNavigator';\nimport DrawerContent from '../components/DrawerContent';\n\nconst Drawer = createDrawerNavigator();\n\nexport default function RootNavigation({ theme }) {\n\treturn (\n\t\t<NavigationContainer theme={theme}>\n\t\t\t<Drawer.Navigator\n\t\t\t\tinitialRouteName=\"Home\"\n\t\t\t\tdrawerContent={DrawerContent}\n\t\t\t\tscreenOptions={{\n\t\t\t\t\theaderShown: false,\n\t\t\t\t\tdrawerPosition: 'right',\n\t\t\t\t}}>\n\t\t\t\t<Drawer.Screen\n\t\t\t\t\tname=\"Root\"\n\t\t\t\t\tcomponent={RootStackNavigator}\n\t\t\t\t\toptions={{\n\t\t\t\t\t\theaderTintColor: theme.colors.onBackground,\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Drawer.Navigator>\n\t\t</NavigationContainer>\n\t);\n}\n","export const lightGreenColors = {\n\tcolors: {\n\t\tprimary: 'rgb(0, 107, 86)',\n\t\tonPrimary: 'rgb(255, 255, 255)',\n\t\tprimaryContainer: 'rgb(126, 248, 212)',\n\t\tonPrimaryContainer: 'rgb(0, 32, 24)',\n\t\tsecondary: 'rgb(75, 99, 91)',\n\t\tonSecondary: 'rgb(255, 255, 255)',\n\t\tsecondaryContainer: 'rgb(206, 233, 221)',\n\t\tonSecondaryContainer: 'rgb(7, 32, 25)',\n\t\ttertiary: 'rgb(65, 99, 118)',\n\t\tonTertiary: 'rgb(255, 255, 255)',\n\t\ttertiaryContainer: 'rgb(196, 231, 255)',\n\t\tonTertiaryContainer: 'rgb(0, 30, 44)',\n\t\terror: 'rgb(186, 26, 26)',\n\t\tonError: 'rgb(255, 255, 255)',\n\t\terrorContainer: 'rgb(255, 218, 214)',\n\t\tonErrorContainer: 'rgb(65, 0, 2)',\n\t\tbackground: 'rgb(251, 253, 250)',\n\t\tonBackground: 'rgb(25, 28, 27)',\n\t\tsurface: 'rgb(251, 253, 250)',\n\t\tonSurface: 'rgb(25, 28, 27)',\n\t\tsurfaceVariant: 'rgb(219, 229, 223)',\n\t\tonSurfaceVariant: 'rgb(63, 73, 69)',\n\t\toutline: 'rgb(111, 121, 117)',\n\t\toutlineVariant: 'rgb(191, 201, 195)',\n\t\tshadow: 'rgb(0, 0, 0)',\n\t\tscrim: 'rgb(0, 0, 0)',\n\t\tinverseSurface: 'rgb(46, 49, 47)',\n\t\tinverseOnSurface: 'rgb(239, 241, 238)',\n\t\tinversePrimary: 'rgb(96, 219, 185)',\n\t\televation: {\n\t\t\tlevel0: 'transparent',\n\t\t\tlevel1: 'rgb(238, 246, 242)',\n\t\t\tlevel2: 'rgb(231, 241, 237)',\n\t\t\tlevel3: 'rgb(223, 237, 232)',\n\t\t\tlevel4: 'rgb(221, 236, 230)',\n\t\t\tlevel5: 'rgb(216, 233, 227)',\n\t\t},\n\t\tsurfaceDisabled: 'rgba(25, 28, 27, 0.12)',\n\t\tonSurfaceDisabled: 'rgba(25, 28, 27, 0.38)',\n\t\tbackdrop: 'rgba(41, 50, 47, 0.4)',\n\t},\n};\n\nexport const darkGreenColors = {\n\tcolors: {\n\t\tprimary: 'rgb(96, 219, 185)',\n\t\tonPrimary: 'rgb(0, 56, 43)',\n\t\tprimaryContainer: 'rgb(0, 81, 64)',\n\t\tonPrimaryContainer: 'rgb(126, 248, 212)',\n\t\tsecondary: 'rgb(178, 204, 193)',\n\t\tonSecondary: 'rgb(29, 53, 45)',\n\t\tsecondaryContainer: 'rgb(52, 76, 67)',\n\t\tonSecondaryContainer: 'rgb(206, 233, 221)',\n\t\ttertiary: 'rgb(168, 203, 226)',\n\t\tonTertiary: 'rgb(13, 52, 70)',\n\t\ttertiaryContainer: 'rgb(40, 75, 94)',\n\t\tonTertiaryContainer: 'rgb(196, 231, 255)',\n\t\terror: 'rgb(255, 180, 171)',\n\t\tonError: 'rgb(105, 0, 5)',\n\t\terrorContainer: 'rgb(147, 0, 10)',\n\t\tonErrorContainer: 'rgb(255, 180, 171)',\n\t\tbackground: 'rgb(25, 28, 27)',\n\t\tonBackground: 'rgb(225, 227, 224)',\n\t\tsurface: 'rgb(25, 28, 27)',\n\t\tonSurface: 'rgb(225, 227, 224)',\n\t\tsurfaceVariant: 'rgb(63, 73, 69)',\n\t\tonSurfaceVariant: 'rgb(191, 201, 195)',\n\t\toutline: 'rgb(137, 147, 142)',\n\t\toutlineVariant: 'rgb(63, 73, 69)',\n\t\tshadow: 'rgb(0, 0, 0)',\n\t\tscrim: 'rgb(0, 0, 0)',\n\t\tinverseSurface: 'rgb(225, 227, 224)',\n\t\tinverseOnSurface: 'rgb(46, 49, 47)',\n\t\tinversePrimary: 'rgb(0, 107, 86)',\n\t\televation: {\n\t\t\tlevel0: 'transparent',\n\t\t\tlevel1: 'rgb(29, 38, 35)',\n\t\t\tlevel2: 'rgb(31, 43, 40)',\n\t\t\tlevel3: 'rgb(33, 49, 44)',\n\t\t\tlevel4: 'rgb(34, 51, 46)',\n\t\t\tlevel5: 'rgb(35, 55, 49)',\n\t\t},\n\t\tsurfaceDisabled: 'rgba(225, 227, 224, 0.12)',\n\t\tonSurfaceDisabled: 'rgba(225, 227, 224, 0.38)',\n\t\tbackdrop: 'rgba(41, 50, 47, 0.4)',\n\t},\n};\n","import 'react-native-gesture-handler';\n\nimport {\n\tDarkTheme as NavigationDarkTheme,\n\tDefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\nimport { MD3DarkTheme, MD3LightTheme, adaptNavigationTheme } from 'react-native-paper';\n\nimport { darkGreenColors, lightGreenColors } from './colors';\n\nconst { LightTheme, DarkTheme } = adaptNavigationTheme({\n\treactNavigationLight: NavigationDefaultTheme,\n\treactNavigationDark: NavigationDarkTheme,\n});\n\nexport const CombinedDefaultTheme = {\n\t...MD3LightTheme,\n\t...LightTheme,\n\t...lightGreenColors,\n};\n\nexport const CombinedDarkTheme = {\n\t...MD3DarkTheme,\n\t...DarkTheme,\n\t...darkGreenColors,\n};\n","import 'react-native-gesture-handler';\n\nimport { registerRootComponent } from 'expo';\nimport React from 'react';\nimport { Provider as PaperProvider } from 'react-native-paper';\n\nimport { PreferencesContext } from './components/PreferencesContext';\nimport RootNavigation from './navigation/RootNavigation';\nimport { CombinedDarkTheme, CombinedDefaultTheme } from './utils/theme';\nimport { StatusBar } from 'react-native';\nimport { PlantProvider } from './context';\n\nfunction App() {\n\tconst [isThemeDark, setIsThemeDark] = React.useState(false);\n\n\tconst theme = isThemeDark ? CombinedDarkTheme : CombinedDefaultTheme;\n\n\tconst toggleTheme = React.useCallback(() => {\n\t\treturn setIsThemeDark(!isThemeDark);\n\t}, [isThemeDark]);\n\n\tconst preferences = React.useMemo(\n\t\t() => ({\n\t\t\ttoggleTheme,\n\t\t\tisThemeDark,\n\t\t}),\n\t\t[toggleTheme, isThemeDark]\n\t);\n\n\treturn (\n\t\t<PaperProvider theme={theme}>\n\t\t\t<PreferencesContext.Provider value={preferences}>\n\t\t\t\t<>\n\t\t\t\t\t<PlantProvider>\n\t\t\t\t\t\t<StatusBar barStyle={isThemeDark ? 'light-content' : 'dark-content'} />\n\t\t\t\t\t\t<RootNavigation theme={theme} />\n\t\t\t\t\t</PlantProvider>\n\t\t\t\t</>\n\t\t\t</PreferencesContext.Provider>\n\t\t</PaperProvider>\n\t);\n}\n\nexport default registerRootComponent(App);\n"],"sourceRoot":""}